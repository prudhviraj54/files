def get_doc_class(read_res)
    def get_doc(content):
        # key words must be lower-case
        drug_clinc = ['shoppers drug mart','pharmasave']
        claim_form_keywords = ['group benefits retiree extended health care claim','group benefits extended health care claim', 'group benefits medical expense claim','group benefits assignment of paramedical','the manufacturers life insurance company','extended health care claim']
        claim_1_keywords = ['manulife','plan contract number','plan member certificate number','plan member name','birthday','plan member information', 'plan member address','spouse','dependants','patient information','date of birthday','page 1 of 2','complete for all expenses','use one line per patient','prescription drug expenses', 'plan no', 'plan sponsor', 'employee name', 'mailing address']
        claim_2_keywords = ['equipment and appliance','vision care expenses','claims confirmation','mailing instruction', 'banking information and email address','page 2 of 2','please mail your completed', 'total amount of all receipts','the manufacturers life insurance']
        claim_form_otip = ['otip']
        otip_claim_1_keywords = ['member basic personal information','patient information','perscription drug expenses','page 1 of 2','identification number','plan number']
        drug_must_keywords = ['pharmacy','drug', 'pharmacies', ' din ', ' rx ']
        drug_keywords = ['pharmacy','drug', 'prescription', ' din ', ' rx ', ' mfr ', ' pays ',' dr ','pharmacies',' total ',' fee ',' cost ','receipt','medication record',' c ', ' f ', ' t ']
        other_receipt_keywords = ['receipt', 'invoice']
        other_receipt_keywords_2 = ['date','service','items','payments']
        other_receipt_exclusive_keywords = ['customer copy', 'claim']
        health_keywords_1 = ['invoice']
        health_keywords_2 = ['inv', 'receipt','billing','statement','estimate']
        health_keywords_3 = ['drug','pharma','prescription',' rx ']
        health_keywords_4 = ['customer copy']
        health_keywords_5 = ['invoice', 'receipt']
        payment_keywords = ['payment', 'subtotal', 'paid', 'balance', 'amount due', 'amount', 'total']
        phys_ref_keywords = ["acupuncture", "athletic therapy", "audiolog", "chiropod", "chiroprac", "christian science", "homeopath", "kinesiolog", "massage therapy", "osteopath", "physio", "podiatr", "psychiatr", "psycholog", "psychoanal", "psychotherap", "shiatsu therap", "speech therap", "reflexolog", "eye exam", "visual training"]

        #content = str(doc_info['content']).replace('\n',' ').lower()
        cleaned_content = re.sub(r'[^\w\s\.]',' ',content)
        cleaned_content = re.sub(' +', ' ', cleaned_content)

        # date_content = str(doc_info['content']).lower()
        # date_content = re.sub(' +', ' ', date_content)

        potential_phone = find_phone(cleaned_content)
        potential_email = find_email(content)
        potential_date = get_date(content)
        amount_pattern = re.compile(r'[\s|$]*[\d{1,3},?]*\d{1,3}\.\d{2}')
        potential_amount = re.findall(amount_pattern, content)

        labelled = 0
        confidence = 0

        classification_res = ''

        if any(word in cleaned_content for word in claim_form_keywords):
            keywords_len = len(claim_1_keywords)
            count = 0
            for keyword in claim_1_keywords:
                if content.find(keyword) > -1:
                    count += 1
            if count >= 10:
                classification_res = 'claim_page_one'
                labelled = 1
                confidence = 1.00
            elif count > 5 and count < 10:
                classification_res = 'claim_page_one'
                labelled = 1
                confidence = count/10

        if labelled == 0 and any(word in cleaned_content for word in claim_form_otip):
            count = 0
            for keyword in otip_claim_1_keywords:
                if cleaned_content.find(keyword) > -1:
                    count += 1
                confidence = count/5
                if confidence > 0.5:
                    classification_res = 'claim_page_one'
                    labelled = 1

        # if content has three or more keywords of claim page two
        if labelled == 0:
            count = 0
            keywords_len = len(claim_2_keywords)
            for keyword in claim_2_keywords:
                if content.find(keyword) > -1:
                    count += 1
            if count > 5:
                classification_res = 'claim_page_two'
                confidence = 1.00
                labelled = 1
            elif count > 2 and count <= 5:
                classification_res = 'claim_page_two'
                confidence = 0.6 + (count-2)*0.1
                labelled = 1

        if labelled == 0 and any(key in cleaned_content for key in drug_must_keywords) and cleaned_content.find('customer copy')==-1:
            count = 0
            # make sure there is payment amount
            pattern = re.compile(r'[\s|$]*[\d{1,3},?]*\d{1,3}\.\d{2}')
            amount = re.search(pattern, content)
            for keyword in drug_keywords:
                if cleaned_content.find(keyword) > -1:
                    count += 1
            if cleaned_content.find('official prescription receipt') > -1:
                classification_res = 'drug_receipt'
                confidence = 1.00
                labelled = 1
            elif count > 6 and cleaned_content.find('claim') == -1 and amount:
                classification_res = 'drug_receipt'
                confidence = 1.00
                labelled = 1
            elif count > 4 and count <= 6 and cleaned_content.find('claim') == -1 and amount:
                classification_res = 'drug_receipt'
                confidence = 0.5 + (count-4)*0.2
                labelled = 1

        if labelled == 0 and any(key in cleaned_content for key in payment_keywords) and potential_amount:
            if (any(key in cleaned_content for key in health_keywords_1)):
                classification_res = 'health_receipt'
                if potential_date and potential_email:
                    confidence = 1.00
                elif potential_date or potential_email:
                    confidence = 0.7
                else:
                    confidence = 0.6
                labelled = 1
            elif (any(key in cleaned_content for key in health_keywords_2))\
                        and (potential_date or potential_phone or potential_email) \
                        and not any(key in cleaned_content for key in health_keywords_4)\
                        and not any(key in cleaned_content for key in health_keywords_3)\
                            and cleaned_content.find(' claim ')==-1:
                classification_res = 'health_receipt'
                confidence = 1.00
                labelled = 1
            elif ((any(key in cleaned_content for key in health_keywords_2)) or (any(key in cleaned_content for key in health_keywords_1)))\
                        and cleaned_content.find(' claim ')==-1:
                classification_res = 'other_receipt'
                confidence = 1.00
                labelled = 1

        if labelled == 0:
            if (any(key in cleaned_content for key in phys_ref_keywords)) and (any(key in cleaned_content for key in health_keywords_5))\
                and content.find('$')>-1:
                classification_res = 'health_receipt'
                confidence = 0.7
                labelled = 1

        if labelled == 0:
            if (any(key in cleaned_content for key in phys_ref_keywords)) and content.find('dr.') > -1:
                classification_res = "physician_referral"
                confidence = 1.00
            else:
                classification_res = 'supporting_doc'
                confidence = 1.00

        return classification_res, confidence
    # Create or get SparkSession
    spark = SparkSession.builder.appName("DocumentClassification").getOrCreate()

    # Define UDF
    get_doc_class_udf = udf(get_doc, returnType=StructType([
        StructField("classification_res", StringType(), nullable=False),
        StructField("confidence", FloatType(), nullable=False)
    ]))

    # Assuming you have a DataFrame named df with the document content
    # Apply UDF to DataFrame and add new columns
    read_res = read_res.withColumn('content',F.lower(F.col('content')))
    read_res = read_res.withColumn("classification_res", get_doc_class_udf("content").getItem("classification_res"))
    read_res = read_res.withColumn("confidence", get_doc_class_udf("content").getItem("confidence"))

    # Return the modified DataFrame
    return df
